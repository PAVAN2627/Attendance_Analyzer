{
  "name": "Attendance Analyzer",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 21,
              "triggerAtMinute": 30
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "3054bd9b-e39e-4fd0-bf96-b73a7e8301a1",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/PAVAN2627/Raw-File/main/Today_Attendance_Expanded.csv",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        220,
        0
      ],
      "id": "f027b7ab-544c-4178-a308-7cd5020e58f3",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "fromEmail": "pavanmalith3@gmail.com",
        "toEmail": "pavanmali0281@gmail.com",
        "subject": "Today's Attendance Report",
        "html": "={{$json[\"htmlBody\"]}}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        1080,
        0
      ],
      "id": "859da7dd-b363-4799-ad2a-3bb37f1c507a",
      "name": "Send Email",
      "webhookId": "900589a8-c893-4df8-867b-37e7b4796bdb",
      "credentials": {
        "smtp": {
          "id": "dvxFsi0oq184YhxT",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const now = new Date();\nconst dateTime = now.toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' });\n\nlet present = 0, late = 0, absent = 0;\nconst total = items.length;\n\nlet html = `\n  <h2 style=\"font-family: Arial; font-size: 24px; color: #2c3e50; text-align: left;\">üìã <b>Today's Attendance Report</b></h2>\n  <p style=\"font-family: Arial; font-size: 14px; color: #555;\"><b>Generated on:</b> ${dateTime}</p>\n\n  <table style=\"border-collapse: collapse; width: 100%; font-family: Arial, sans-serif; font-size: 16px;\">\n    <thead>\n      <tr style=\"background-color: #3498db; color: white;\">\n        <th style=\"border: 1px solid #ddd; padding: 10px;\">Name</th>\n        <th style=\"border: 1px solid #ddd; padding: 10px;\">Check-In Time</th>\n        <th style=\"border: 1px solid #ddd; padding: 10px;\">Status</th>\n      </tr>\n    </thead>\n    <tbody>\n`;\n\nfor (const item of items) {\n  const { Name, CheckInTime, Status } = item.json;\n\n  let rowColor = '';\n  if (Status === 'Present') {\n    rowColor = '#d4edda'; // green\n    present++;\n  } else if (Status === 'Late') {\n    rowColor = '#fff3cd'; // yellow\n    late++;\n  } else if (Status === 'Absent') {\n    rowColor = '#f8d7da'; // red\n    absent++;\n  }\n\n  html += `\n      <tr style=\"background-color: ${rowColor};\">\n        <td style=\"border: 1px solid #ddd; padding: 10px;\">${Name}</td>\n        <td style=\"border: 1px solid #ddd; padding: 10px;\">${CheckInTime || '‚Äî'}</td>\n        <td style=\"border: 1px solid #ddd; padding: 10px;\">${Status}</td>\n      </tr>\n  `;\n}\n\n// ‚ûï Add total row at the end of the table\nhtml += `\n      <tr style=\"background-color: #e0e0e0;\">\n        <td colspan=\"2\" style=\"border: 1px solid #ddd; padding: 10px; text-align: right;\"><b>Total Students</b></td>\n        <td style=\"border: 1px solid #ddd; padding: 10px;\"><b>${total}</b></td>\n      </tr>\n`;\n\nhtml += `\n    </tbody>\n  </table>\n\n  <br/>\n  <p style=\"font-family: Arial; font-size: 16px; color: #333;\">\n    <b>Summary:</b><br/>\n    ‚úÖ Present: ${present}<br/>\n    ‚è∞ Late: ${late}<br/>\n    ‚ùå Absent: ${absent}\n  </p>\n`;\n\nreturn [{\n  json: {\n    htmlBody: html\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        0
      ],
      "id": "50644af5-0a22-443d-8a71-fa3e30fa7471",
      "name": "make Table Report"
    },
    {
      "parameters": {
        "jsCode": "// Get the CSV string from HTTP Request node's response\nconst response = $node[\"HTTP Request\"].json;\n\n// If the content is inside a property like \"data\", access it properly\nconst csvText = typeof response === 'string' ? response : response.data || '';\n\n// If still empty, throw error\nif (!csvText) {\n  throw new Error(\"CSV data not found. Check HTTP Request output.\");\n}\n\n// Now split and parse CSV\nconst lines = csvText.split('\\n');\nconst headers = lines[0].split(',');\n\nconst result = lines.slice(1).map(line => {\n  const values = line.split(',');\n  const obj = {};\n  headers.forEach((header, index) => {\n    obj[header.trim()] = values[index] ? values[index].trim() : '';\n  });\n  return { json: obj };\n});\n\nreturn result;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        0
      ],
      "id": "b2485e6d-e8aa-4bba-b491-0f17de5090b4",
      "name": "get Data"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const name = item.json.Name;\n  const timeStr = item.json.CheckInTime;\n\n  let status = 'Absent';\n  if (timeStr && timeStr !== '') {\n    const hour = parseInt(timeStr.split(':')[0]);\n    const minute = parseInt(timeStr.split(':')[1]);\n    \n    // Let's assume before 9:30 is \"Present\", after is \"Late\"\n    if (hour < 9 || (hour === 9 && minute <= 30)) {\n      status = 'Present';\n    } else {\n      status = 'Late';\n    }\n  }\n\n  return {\n    json: {\n      Name: name,\n      CheckInTime: timeStr || 'N/A',\n      Status: status\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        660,
        0
      ],
      "id": "53c49e80-4631-43ef-a44c-d92c6451732a",
      "name": "Status"
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "get Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email": {
      "main": [
        []
      ]
    },
    "make Table Report": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get Data": {
      "main": [
        [
          {
            "node": "Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Status": {
      "main": [
        [
          {
            "node": "make Table Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b2f267d4-90ae-4985-8dab-e8bd165b3502",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f28e6ff5be212d43102002d928fe3b40824e3373518aef4bf14031abd9aeab9e"
  },
  "id": "S5XmWZWfaDpJ5c6f",
  "tags": []
}